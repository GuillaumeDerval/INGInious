#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2014 Universit√© Catholique de Louvain.
#
# This file is part of INGInious.
#
# INGInious is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# INGInious is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License along with INGInious.  If not, see <http://www.gnu.org/licenses/>.
import difflib
import getopt
import glob
import os
import sys

import commentjson
import docker

import common.courses
import frontend


def run_task(task, inputdata):
    # Define memory limits
    mem_limit = task.get_limits()["memory"]
    if mem_limit < 20:
        mem_limit = 20
    elif mem_limit > 500:
        mem_limit = 500

    # Create container and fetch container id
    response = dock.create_container(
        'inginious/' +
        task.get_environment(),
        command='INGInious --debug',
        stdin_open=True,
        network_disabled=True,
        volumes={
            '/ro/task': {}},
        mem_limit=mem_limit *
        1024 *
        1024)
    container_id = response["Id"]

    # Start the container
    dock.start(container_id, binds={os.path.abspath(taskdir): {'ro': True, 'bind': '/ro/task'}})
    dock.attach_socket(container_id, {'stdin': 1, 'stream': 1}).send(commentjson.dumps(inputdata) + "\n")
    dock.wait(container_id)

    # Get the std outputs
    stdout = str(dock.logs(container_id, stdout=True, stderr=False))
    stderr = str(dock.logs(container_id, stdout=False, stderr=True))

    # Delete used containers to avoid using too much disk space
    dock.remove_container(container_id, True, False, True)
    return stdout, stderr


def usage():
    print "Usage : test_task [-v|--verbose]  course_id/task_id"
    print "Verbose mode prints the entire standard output from the task"
    sys.exit(1)

# We need to be sudo to run docker
euid = os.geteuid()
if euid != 0:
    print "Script not started as root. Exiting..."
    exit(2)

# Read arguments from the command line
try:
    opts, args = getopt.getopt(sys.argv[1:], 'v', ['verbose'])
    if not args:
        usage()
except getopt.GetoptError as e:
    print e
    sys.exit(1)


verbose = False
for opt, arg in opts:
    if opt in ('-v', '--verbose'):
        verbose = True


# Read input argument
ids = args[0].split('/')
courseid = ids[0]
taskid = ids[1]

# Read configuration file to obtain tasks directory
frontend.configuration.INGIniousConfiguration.load("./configuration.json")
taskdir = frontend.configuration.INGIniousConfiguration['tasks_directory'] + '/' + courseid + '/' + taskid
dock = docker.Client(base_url=frontend.configuration.INGIniousConfiguration.get("docker_instances")[0].get("server_url"))

# Open the taskfile
task = common.courses.Course(courseid).get_task(taskid)
limits = task.get_limits()

# List inputfiles
inputfiles = glob.glob(taskdir + '/*.test')

i = 1
for filename in inputfiles:
    filename = os.path.basename(filename)
    print '\x1b[34;1m[' + str(i) + '/' + str(len(inputfiles)) + ']' + " Testing input file : " + filename + '\033[0m'

    # Open the input file and merge with limits
    try:
        inputfile = open(taskdir + '/' + filename, 'r')
    except IOError as e:
        print e
        exit(2)
    data = commentjson.load(inputfile)
    data['limits'] = limits

    # Run the task
    stdout, stderr = run_task(task, data)

    if stderr:
        print '\x1b[31;1m' + stderr + '\033[0m'

    # Open freshly computed json
    result = commentjson.loads(stdout.strip('\0\n '))

    # Print stdout if verbose
    if verbose:
        print '\x1b[1m-> Complete standard output : \033[0m'
        for line in result['stdout'].splitlines(1):
            print '\t' + line.strip('\n')

    # Start the comparison
    noprob = True

    if 'stderr' in result and result['stderr']:
        noprob = False
        print '\x1b[31;1m-> There was some error(s) during execution : \033[0m'
        for line in result['stderr'].splitlines(1):
            print '\x1b[31;1m\t' + line.strip('\n') + '\033[0m'

    if 'stdout' in data and data['stdout']:
        if data['stdout'] != result['stdout']:
            noprob = False
            print "\033[1m-> Standard output doesn't match :\033[0m"
            for line in difflib.unified_diff(data['stdout'].splitlines(1), result['stdout'].splitlines(1), fromfile='Expected', tofile='Actual'):
                print '\t' + line.strip('\n')

    if 'result' in data and data['result']:
        if data['result'] != result['result']:
            noprob = False
            print "\033[1m-> Result doesn't match :\033[0m"
            print "\t Expected result : " + data['result']
            print "\t Actual result : " + result['result']

    if 'text' in data and data['text']:
        if not 'text' in result:
            noprob = False
            print "\033[1m-> No global feedback given \033[0m"
            print "\t Expected result : " + data['text']
        elif data['text'].strip() != result['text'].strip():
            noprob = False
            print "\033[1m-> Global feedback doesn't match :\033[0m"
            print "\t Expected result : " + data['text']
            print "\t Actual result : " + result['text']

    if 'problems' in data and data['problems']:
        if not 'problems' in result:
            noprob = False
            print "\033[1m-> No specific problem feedback given as expected \033[0m"
        else:
            for problem in data['problems']:
                if not problem in result['problems']:
                    noprob = False
                    print "\033[1m-> No feedback for problem id " + problem + " given \033[0m"
                    print "\t Expected result : " + data['problems'][problem]
                elif data['problems'][problem].strip() != result['problems'][problem].strip():
                    noprob = False
                    print "\033[1m-> Feedback for problem id " + problem + " doesn't match :\033[0m"
                    print "\t Expected result : " + data['problems'][problem]
                    print "\t Actual result : " + result['problems'][problem]

    if 'tests' in data and data['tests']:
        if not 'tests' in result:
            noprob = False
            print "\033[1m-> No tests results given as expected \033[0m"
        else:
            for tag in data['tests']:
                if not tag in result['tests']:
                    noprob = False
                    print "\033[1m-> No test result with tag '" + tag + "' given \033[0m"
                    print "\t Expected result : " + data['tests'][tag]
                elif data['tests'][tag] != result['tests'][tag]:
                    noprob = False
                    print "\033[1m-> Test with tag '" + tag + "' failed :\033[0m"
                    print "\t Expected result : " + data['tests'][tag]
                    print "\t Actual result : " + result['tests'][tag]

    if noprob:
        print "\033[32;1m-> All tests passed \033[0m"

    i = i + 1
